// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Course {
  id             String    @id @default(cuid())
  title          String
  edition        Int?
  publisher      String
  coverImageUrl  String?
  sectionsIdList String[]
  sections       Section[]

  @@unique([title, edition, publisher])
}

model Section {
  id          String   @id @default(cuid())
  title       String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  unitsIdList String[]
  units       Unit[]
}

model Unit {
  id        String     @id @default(cuid())
  title     String
  subTitle  String?
  sectionId String
  section   Section    @relation(fields: [sectionId], references: [id])
  Exercises Exercise[]
}

model Exercise {
  id                  String                @id @default(cuid())
  instruction         String
  unitId              String
  type                ExerciseType
  fillInTheBlankItems FillInTheBlankItem[]
  connectSentenceItem ConnectSentenceItem[]

  unit Unit @relation(fields: [unitId], references: [id])
}

model FillInTheBlankItem {
  id       String  @id @default(cuid())
  sentence String
  blanks   Blank[]

  exerciseId             String?
  exercise               Exercise?            @relation(fields: [exerciseId], references: [id])
  connectSentenceLeftId  String?              @unique
  connectSentenceLeft    ConnectSentenceItem? @relation("connectSentenceLeft", fields: [connectSentenceLeftId], references: [id])
  connectSentenceRightId String?              @unique
  connectSentenceRight   ConnectSentenceItem? @relation("connectSentenceRight", fields: [connectSentenceRightId], references: [id])
}

model ConnectSentenceItem {
  id                  String              @id @default(cuid())
  leftString          String?
  rightString         String?
  leftFillInTheBlank  FillInTheBlankItem? @relation("connectSentenceLeft")
  rightFillInTheBlank FillInTheBlankItem? @relation("connectSentenceRight")

  exerciseId String
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model Blank {
  id                   String             @id @default(cuid())
  start                Int
  end                  Int
  FillInTheBlankItem   FillInTheBlankItem @relation(fields: [fillInTheBlankItemId], references: [id])
  fillInTheBlankItemId String
}

enum ExerciseType {
  FillInTheBlankItem
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guestbook {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  message   String   @db.VarChar(100)
}
